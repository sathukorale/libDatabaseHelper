using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;

using libDatabaseHelper.classes.generic;
using libDatabaseHelper.forms;

namespace libDatabaseHelper.classes.mysql
{
    public class DatabaseManager : GenericDatabaseManager
    {
        public DatabaseManager() : base(DatabaseType.MySQL)
        {
        }

        public override bool TableExist(Type type)
        {
            var entity = GenericDatabaseEntity.GetNonDisposableRefenceObject(type);
            if (entity == null)
                return false;

            var connection = GenericConnectionManager.GetConnectionManager(GetSupportedDatabase()).GetConnection(type);
            if (connection == null || connection.State != ConnectionState.Open)
            {
                throw new DatabaseConnectionException(DatabaseConnectionException.ConnectionErrorType.UnableToConnectToTheDatabase);
            }

            var columns = entity.GetColumns(true);
            var fields = columns.GetOtherColumns().ToList();
            var command = connection.CreateCommand();
            var availableColumns = GetTableFields(type);
            var listToRemove = new List<string>();

            if (availableColumns == null || availableColumns.Any() == false) return false;

            foreach (var columnName in availableColumns)
            {
                List<FieldInfo> found;
                var existing = (found = fields.Where(i => i.Name.ToLower() == columnName).ToList()).Any();

                if (existing)
                {
                    fields.Remove(found[0]);
                }
                else
                {
                    listToRemove.Add(columnName);
                }
            }

            foreach (var fieldInfo in entity.GetColumns(true).GetOtherColumns().ToList())
            {
                var columnAttributes = (TableColumn)fieldInfo.GetCustomAttributes(typeof(TableColumn), true)[0];

                if (columnAttributes.ReferencedField != null && columnAttributes.ReferencedClass != null)
                {
                    Relationship.Add(columnAttributes.ReferencedClass, type);
                }
            }

            var currentPrimaryKeyDetails = GetPrimaryKeyDetails(type);
            var hasThePrimaryKeyChanged = (currentPrimaryKeyDetails != null) &&
                                          (columns.GetPrimaryKeys().Any(i => currentPrimaryKeyDetails.PrimaryKeyFields.Contains(i.Name.ToLower()) == false) ||
                                           currentPrimaryKeyDetails.PrimaryKeyFields.Any(i => columns.GetPrimaryKeys().Any(ii => ii.Name.ToLower() == i) == false));
            if (hasThePrimaryKeyChanged)
            {
                DeleteAll(type);

                var commandToDropConstraint = string.Format("ALTER TABLE {0} DROP PRIMARY KEY", type.Name);

                command.CommandText = commandToDropConstraint;
                command.ExecuteNonQuery();
            }

            if (listToRemove.Any())
            {
                var columnsToRemove = listToRemove.Aggregate("", (current, column) => current + ((current == "" ? "" : ", ") + column));
                var commandToRemove = "ALTER TABLE " + type.Name + " DROP " + columnsToRemove;

                command.CommandText = commandToRemove;
                command.ExecuteNonQuery();
            }

            if (fields.Any())
            {
                foreach (var column in fields)
                {
                    var columnsToAdd = "";
                    var columnAttributes = (TableColumn)column.GetCustomAttributes(typeof(TableColumn), true)[0];
                    columnsToAdd += (columnsToAdd == "" ? " " : ", ") + column.Name + " " +
                                    FieldTools.GetDbTypeString(column.FieldType,
                                        columnAttributes.IsAutogenerated || columnAttributes.IsUnique ||
                                        columnAttributes.IsPrimaryKey,
                                        columnAttributes.Length);
                    if (GenericFieldTools.IsTypeNumber(column.FieldType) && columnAttributes.IsAutogenerated &&
                        columnAttributes.AutogenrationMethod == null)
                    {
                        columnsToAdd += " AUTO_INCREMENT ";
                    }
                    else if (columnAttributes.IsUnique)
                    {
                        columnsToAdd += " UNIQUE ";
                    }

                    command.CommandText = "ALTER TABLE " + type.Name + " ADD ( " + columnsToAdd + " )";
                    command.ExecuteNonQuery();

                    command.CommandText = "UPDATE " + type.Name + " SET " + column.Name + "=@" + column.Name;

                    GenericUtils.AddWithValue(ref command, "@" + column.Name, GenericFieldTools.GetDefaultValue(column.FieldType, columnAttributes.DefaultValue));

                    command.ExecuteNonQuery();
                }
            }

            if (hasThePrimaryKeyChanged)
            {
                foreach (var primaryKey in columns.GetPrimaryKeys())
                {
                    var columnAttributes = (TableColumn) primaryKey.GetCustomAttributes(typeof(TableColumn), true)[0];
                    var dataType = FieldTools.GetDbTypeString(primaryKey.FieldType, true, columnAttributes.Length);
                    
                    command.CommandText = string.Format("ALTER TABLE {0} MODIFY COLUMN {1} {2} NOT NULL", type.Name, primaryKey.Name, dataType);
                    command.ExecuteNonQuery();
                }

                var primaryKeyFieldString = columns.GetPrimaryKeys().Select(i => i.Name).Aggregate((a, b) => a + ", " + b);

                command.CommandText = string.Format("ALTER TABLE {0} ADD PRIMARY KEY({1})", type.Name, primaryKeyFieldString);
                command.ExecuteNonQuery();
            }

            command.Dispose();

            return true;
        }

        public override bool CreateTable(Type type)
        {
            var obj = GenericDatabaseEntity.GetNonDisposableRefenceObject(type);
            if (obj == null)
            {
                return false;
            }

            if (GetRegisteredDatabaseEntities().Contains(type) == false)
            {
                GetRegisteredDatabaseEntities().Add(type);
            }
            else
            {
                return false;
            }

            if (TableExist(type))
            {
                return false;
            }

            var result = obj.GetColumns(true);
            if (result == null || (result.GetOtherColumns().Count() == 0 && result.GetPrimaryKeys().Count() == 0))
            {
                throw new DatabaseException(DatabaseException.ErrorType.NoColumnsFound);
            }

            if (result.GetPrimaryKeys() == null || !result.GetPrimaryKeys().Any())
            {
                throw new DatabaseException(DatabaseException.ErrorType.NoPrimaryKeyColumnsFound);
            }

            var connection = GenericConnectionManager.GetConnectionManager(GetSupportedDatabase()).GetConnection(type);
            using (var command = connection.CreateCommand())
            {
                var variableDeclarations = "";
                foreach (var column in result.GetOtherColumns())
                {
                    var columnAttributes = (TableColumn)column.GetCustomAttributes(typeof(TableColumn), true)[0];
                    variableDeclarations += (variableDeclarations == "" ? " " : ", ") + column.Name + " " +
                                            FieldTools.GetDbTypeString(column.FieldType,
                                                columnAttributes.IsAutogenerated || columnAttributes.IsUnique || columnAttributes.IsPrimaryKey,
                                                columnAttributes.Length);
                    if (GenericFieldTools.IsTypeNumber(column.FieldType) && columnAttributes.IsAutogenerated && columnAttributes.AutogenrationMethod == null)
                    {
                        variableDeclarations += " AUTO_INCREMENT ";
                    }
                    else if (columnAttributes.IsUnique)
                    {
                        variableDeclarations += " UNIQUE ";
                    }
                }

                var primaryVariabeDeclarations = result.GetPrimaryKeys().Aggregate("", (current, column) => current + ((current == "" ? "" : ", ") + column.Name));
                if (primaryVariabeDeclarations != "")
                {
                    primaryVariabeDeclarations = ", PRIMARY KEY (" + primaryVariabeDeclarations + ")";
                }

                var createStatement = "CREATE TABLE IF NOT EXISTS " + obj.GetType().Name + "(" + variableDeclarations + primaryVariabeDeclarations + ")";
                command.CommandText = createStatement;

                var executionResult = command.ExecuteNonQuery();
                return executionResult >= 0;
            }
        }

        public override bool DropTable(Type type)
        {
            var obj = GenericDatabaseEntity.GetNonDisposableRefenceObject(type);
            if (obj == null)
            {
                return false;
            }

            if (GetRegisteredDatabaseEntities().Contains(type))
            {
                GetRegisteredDatabaseEntities().Remove(type);
            }

            if (! TableExist(type))
            {
                return false;
            }

            var result = obj.GetColumns(true);
            if (result == null || result.GetPrimaryKeys() == null || !result.GetPrimaryKeys().Any())
            {
                throw new DatabaseException(DatabaseException.ErrorType.NoPrimaryKeyColumnsFound);
            }

            var connection = GenericConnectionManager.GetConnectionManager(GetSupportedDatabase()).GetConnection(type);

            using (var command = connection.CreateCommand())
            {
                var createStatement = "DROP TABLE " + type.Name;
                command.CommandText = createStatement;

                var executionResult = command.ExecuteNonQuery();
                return executionResult >= 0;
            }
        }

        public override GenericDatabaseEntity[] Select(Type type, Selector[] selectors)
        {
            var obj = GenericDatabaseEntity.GetNonDisposableRefenceObject(type);
            if (obj == null) return new GenericDatabaseEntity[0];
            var result = obj.GetColumns(true);
            if (result == null || result.GetPrimaryKeys() == null || !result.GetPrimaryKeys().Any())
            {
                throw new DatabaseException(DatabaseException.ErrorType.NoPrimaryKeyColumnsFound);
            }

            var selectFields =
                result.GetOtherColumns()
                    .Where(i => ((TableColumn)i.GetCustomAttributes(typeof(TableColumn), true)[0]).IsRetrievableFromDatabase)
                    .Aggregate("", (current, selector) => current + ((current == "" ? "" : ", ") + selector.Name));

            var connection = GenericConnectionManager.GetConnectionManager(GetSupportedDatabase()).GetConnection(type);

            using (var command = connection.CreateCommand())
            {
                var whereStatement = "";
                if (selectors != null)
                {
                    whereStatement = selectors.Aggregate("", (current, selector) =>
                    {
                        var dbCommand = command;
                        return current + ((current == "" ? "" : " AND ") + selector.SetToCommand(ref dbCommand));
                    });
                }

                var selectStatement = "SELECT " + selectFields + " FROM " + obj.GetType().Name +
                                      (selectors != null && selectors.Any() ? (" WHERE " + whereStatement) : "");

                command.CommandText = selectStatement;

                var reader = command.ExecuteReader();
                var results = ParseDataReader(type, reader);

                return results;
            }
        }

        public override bool DeleteMatching(Type type, Selector[] selectors)
        {
            var obj = GenericDatabaseEntity.GetNonDisposableRefenceObject(type);
            if (obj == null) return false;

            var result = obj.GetColumns(true);
            if (result == null || result.GetPrimaryKeys() == null || !result.GetPrimaryKeys().Any())
            {
                throw new DatabaseException(DatabaseException.ErrorType.NoPrimaryKeyColumnsFound);
            }

            var connection = GenericConnectionManager.GetConnectionManager(GetSupportedDatabase()).GetConnection(type);
            using (var command = connection.CreateCommand())
            {
                var whereStatement = "";
                if (selectors != null)
                    whereStatement = selectors.Aggregate("", (current, selector) => 
                    {
                        var dbCommand = command;
                        return current + ((current == "" ? "" : " AND ") + selector.SetToCommand(ref dbCommand));
                    });

                var selectStatement = "DELETE FROM " + obj.GetType().Name + (selectors != null && selectors.Any() ? (" WHERE " + whereStatement) : "");
                command.CommandText = selectStatement;

                var executionResult = command.ExecuteNonQuery();
                if (executionResult >= 0)
                {
                    _OnBulkDelete(type, selectors);
                    return true;
                }
            }
            return false;
        }

        public override void FillDataTable(Type type, ref DataTable table, Selector[] selectors, int limit)
        {
            var obj = GenericDatabaseEntity.GetNonDisposableRefenceObject(type);
            if (obj == null)
                return;

            var commandString = DatabaseEntity.GetSelectCommandString(type);
            var whereQuery = "";
            var command = GenericConnectionManager.GetConnectionManager(GetSupportedDatabase()).GetConnection(type).CreateCommand();

            if (selectors != null && selectors.Any())
            {
                whereQuery = selectors.Aggregate(whereQuery, (current, selector) => current + ((current == "" ? "" : " AND ") + selector.SetToCommand(ref command)));
            }

            command.CommandText = commandString + (whereQuery != "" ? (" WHERE " + whereQuery) : "") + (limit > 0 ? (" LIMIT " + limit) : "");

            var reader = command.ExecuteReader();

            var fieldInfos = obj.GetColumns(true).GetOtherColumns().Where(i => ((TableColumn)i.GetCustomAttributes(typeof(TableColumn), true)[0]).IsRetrievableFromDatabase).ToArray();

            table.Rows.Clear();
            table.Columns.Clear();

            var translators = new List<ITranslator>();

            foreach (var fieldInfo in fieldInfos)
            {
                var cInfo = ((TableColumn)fieldInfo.GetCustomAttributes(typeof(TableColumn), true)[0]);
                if (fieldInfo.FieldType == typeof(bool))
                    table.Columns.Add(cInfo.GridDisplayName ?? fieldInfo.Name, typeof(bool));
                else
                    table.Columns.Add(cInfo.GridDisplayName ?? fieldInfo.Name);

                var translator = cInfo.TranslatorType == null ? null : TranslatorRegistry.Instance.Get(cInfo.TranslatorType);
                translators.Add(translator);
            }

            if (!reader.Read())
            {
                try { reader.Close(); } catch { /* IGNORED */ }
                command.Dispose();
                return;
            }

            frmLoadingDialog.ShowWindow();
            do
            {
                if (frmLoadingDialog.GetStatus())
                    break;
                var row = table.Rows.Add();
                for (var i = 0; i < table.Columns.Count; i++)
                {
                    try
                    {
                        if (translators[i] != null)
                        {
                            var value = reader[i];
                            row[i] = (translators.Count > i && i >= 0) ? translators[i].ToTranslated(value) : value.ToString();
                        }
                        else
                            row[i] = reader[i];
                    }
                    catch { }
                }
            }
            while (reader.Read());
            try { reader.Close(); } catch { /* IGNORED */ }
            frmLoadingDialog.HideWindow();
            command.Dispose();
        }

        public override PrimaryKeyConstraintDetails GetPrimaryKeyDetails(Type type)
        {
            using (var command = GenericConnectionManager.GetConnectionManager(GetSupportedDatabase()).GetConnection(type).CreateCommand())
            {
                var commandString = string.Format("SELECT CONSTRAINT_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE CONSTRAINT_NAME = 'PRIMARY' AND TABLE_SCHEMA='{0}' AND TABLE_NAME='{1}'", command.Connection.Database, type.Name);

                command.CommandText = commandString;

                var reader = command.ExecuteReader();
                var primaryKeysPerConstraint = new Dictionary<string, List<string>>();

                try
                {
                    while (reader.Read())
                    {
                        try
                        {
                            var constraintName = reader.GetString(0);
                            var fieldName = reader.GetString(1).ToLower();

                            if (primaryKeysPerConstraint.ContainsKey(constraintName) == false) primaryKeysPerConstraint.Add(constraintName, new List<string>());

                            primaryKeysPerConstraint[constraintName].Add(fieldName);
                        }
                        catch { /* IGNORED */ }
                    }
                }
                catch { /* IGNORED */ }

                reader.Close();

                if (primaryKeysPerConstraint.Any() == false) return null;
                if (primaryKeysPerConstraint.Count > 1) throw new InvalidDataException(string.Format("Due to some reason the table '{0}' has more than 1 primary key.", type.Name));

                var firstEntry = primaryKeysPerConstraint.First();
                return new PrimaryKeyConstraintDetails(firstEntry.Key, firstEntry.Value.ToArray());
            }
        }

        public override string[] GetTableFields(Type type)
        {
            var connection = GenericConnectionManager.GetConnectionManager(GetSupportedDatabase()).GetConnection(type);
            using (var command = connection.CreateCommand())
            {
                command.CommandText = string.Format("SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='{0}' AND TABLE_NAME='{1}'", connection.Database, type.Name);

                var reader = command.ExecuteReader();
                if (reader.HasRows == false)
                {
                    reader.Close();
                    return null;
                }

                var columns = new List<string>();

                try
                {
                    while (reader.Read())
                    {
                        try
                        {
                            var columnName = reader.GetString(0).ToLower();
                            columns.Add(columnName);
                        }
                        catch { /* IGNORED */ }
                    }
                }
                catch { /* IGNORED */ }
                
                reader.Close();

                return columns.ToArray();
            }
        }
    }
}

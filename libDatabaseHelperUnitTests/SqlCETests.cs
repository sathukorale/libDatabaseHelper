using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;

using libDatabaseHelper.classes.sqlce;
using libDatabaseHelper.classes.generic;
using libDatabaseHelperUnitTests.forms;
using libDatabaseHelper.forms;
using System.IO;
using System.Data;
using libDatabaseHelperUnitTests.forms.sqlce;
using NUnit.Framework.Interfaces;


namespace ChangingPrimaryKeyTestNamespace_Original
{
    public class SimpleNormalTable : DatabaseEntity
    {
        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 1")]
        public int Column1;

        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 2")]
        public int Column2;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 3")]
        public int Column3;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 4")]
        public string Column4;
    }
}

namespace ChangingPrimaryKeyTestNamespace_RemovingPrimaryKey
{
    public class SimpleNormalTable : DatabaseEntity
    {
        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 1")]
        public int Column1;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 2")]
        public int Column2;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 3")]
        public int Column3;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 4")]
        public string Column4;
    }
}

namespace ChangingPrimaryKeyTestNamespace_AddingPrimaryKey
{
    public class SimpleNormalTable : DatabaseEntity
    {
        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 1")]
        public int Column1;

        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 2")]
        public int Column2;

        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 3")]
        public int Column3;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 4")]
        public string Column4;
    }
}

namespace ChangingPrimaryKeyTestNamespace_RemovingPrimaryKeyColumn
{
    public class SimpleNormalTable : DatabaseEntity
    {
        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 1")]
        public int Column1;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 3")]
        public int Column3;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 4")]
        public string Column4;
    }
}

namespace ChangingPrimaryKeyTestNamespace_AddingPrimaryKeyColumn
{
    public class SimpleNormalTable : DatabaseEntity
    {
        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 1")]
        public int Column1;

        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 2")]
        public int Column2;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 3")]
        public int Column3;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 4")]
        public string Column4;

        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 3")]
        public int Column5;
    }
}

namespace libDatabaseHelperUnitTests.sqlce
{
    public class SampleTable1 : DatabaseEntity, IComboBoxItem
    {
        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 1")]
        public int Column1;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 2")]
        public string Column2;

        #region IComboBoxItem Members

        public object GetID()
        {
            return Column1;
        }

        public string GetSelectQueryItems()
        {
            return "[OBJ].Column2";
        }

        #endregion
    }

    public class SampleTable2 : DatabaseEntity
    {
        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 1")]
        public int Column1;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 2")]
        public string Column2;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = true, GridDisplayName = "Column 3", ReferencedClass = typeof(SampleTable1), ReferencedField = "Column1")]
        public int Column3;
    }

    public class InvalidSampleTable3NoPrimaryKey : DatabaseEntity
    {
        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 1")]
        public int Column1;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 2")]
        public string Column2;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = true, GridDisplayName = "Column 3", ReferencedClass = typeof(SampleTable1), ReferencedField = "Column1")]
        public int Column3;
    }

    public class InvalidSampleTable4NoColumns : DatabaseEntity
    {
        public int Column1;
        public string Column2;
        public int Column3;
    }

    public class Database1NormalTable1 : DatabaseEntity
    {
        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 1")]
        public int Column1;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 2")]
        public string Column2;
    }

    public class Database2NormalTable2 : DatabaseEntity
    {
        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 1")]
        public int Column1;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 2")]
        public string Column2;
    }

    public class NonProperlyImplementedClass : GenericDatabaseEntity
    {
        [TableColumn(IsPrimaryKey = true, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 1")]
        public int Column1;

        [TableColumn(IsPrimaryKey = false, ShouldIncludeInTable = true, IsAutogenerated = false, GridDisplayName = "Column 2")]
        public string Column2;

        public NonProperlyImplementedClass() { }

        protected override DatabaseType FetchDatbaseType()
        {
            return DatabaseType.MySQL;
        }
    }

    /// <summary>
    /// Summary description for GenericTests
    /// </summary>
    [TestFixture]
    public class SqlCeTests
    {
        public SqlCeTests()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return NUnit.Framework.TestContext.CurrentContext;
            }
        }

        private static int _uniqueIntKey = 0;

        public static object GenerateStringKey(string table, string field)
        {
            return DateTime.Now.Ticks.ToString();
        }

        public static int GenerateIntKey(string table, string field)
        {
            return ++_uniqueIntKey;
        }

        public static void PerformCleanUp()
        {
            Console.Write("- Performing Cleanup... ");
            try
            {
                if (File.Exists("dblocaldata.sdf"))
                {
                    File.Delete("dblocaldata.sdf");
                }

                if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\libDBHelperSampleFolder1\\SampleDatabase1.sdf"))
                {
                    File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\libDBHelperSampleFolder1\\SampleDatabase1.sdf");
                }

                if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\libDBHelperSampleFolder1\\TestDatabase1.sdf"))
                {
                    File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\libDBHelperSampleFolder1\\TestDatabase1.sdf");
                }

                if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\libDBHelperSampleFolder1\\TestDatabase2.sdf"))
                {
                    File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\libDBHelperSampleFolder1\\TestDatabase2.sdf");
                }
                Console.WriteLine("[OK]");
            }
            catch 
            {
                Console.WriteLine("[FAILED]");
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        [SetUp]
        public void TEST_Setup()
        {
            Console.WriteLine("======================================== [TEST START] ========================================");
            GenericUtils.CleanupEverything();
            PerformCleanUp();

            GenericConnectionManager.RegisterConnectionManager<ConnectionManager>();
            GenericDatabaseManager.RegisterDatabaseManager<DatabaseManager>(true);

            var dbFile = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\libDBHelperSampleFolder1\\SampleDatabase1.sdf";
            GenericUtils.CreateFolderStructure(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\libDBHelperSampleFolder1");
            GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).SetConnectionString("Data Source=" + dbFile + ";Persist Security Info=False;");

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DropTable<SampleTable1>();
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DropTable<SampleTable2>();
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DropTable<InvalidSampleTable3NoPrimaryKey>();

            Assert.IsTrue(GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).GetConnection() != null);
        }

        [TearDown]
        public void TEST_Cleanup()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DropTable<SampleTable1>();
            Assert.IsFalse(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DropTable<SampleTable2>();
            Assert.IsFalse(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable2>());

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DropTable<InvalidSampleTable3NoPrimaryKey>();
            Assert.IsFalse(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<InvalidSampleTable3NoPrimaryKey>());

            GenericUtils.CleanupEverything();
            PerformCleanUp();

            Console.WriteLine("- " + TestContext.Test.FullName + " :" + (TestContext.Result.Outcome == ResultState.Success ? " [PASSED] " : " [FAILED] "));
            Console.WriteLine("========================================= [TEST END] =========================================");
        }

        [Test]
        public void CreateAndDrop_SampleTable1()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DropTable<SampleTable1>();
            Assert.IsFalse(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());
        }

        [Test]
        public void CreateInsertAndDeleteSingle_SampleTable1()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable2>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            var insertedEntry = new SampleTable1 { Column1 = 1, Column2 = "Sample Data" };
            insertedEntry.Add();

            var fetchedEntries = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>();
            Assert.IsTrue(fetchedEntries.Length == 1);

            var fetchedEntry = fetchedEntries.First() as SampleTable1;

            Assert.IsTrue(fetchedEntry != null);
            Assert.IsTrue(fetchedEntry.Column1 == insertedEntry.Column1);
            Assert.IsTrue(fetchedEntry.Column2 == insertedEntry.Column2);

            Assert.IsTrue(fetchedEntry.Remove());

            fetchedEntries = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>();
            Assert.IsTrue(fetchedEntries.Length == 0);
        }

        [Test]
        public void CreateInsertAndDeleteMultiple1_SampleTable1()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable2>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            for (int i = 0; i < 100; i++)
            {
                var insertedEntry = new SampleTable1 { Column1 = 1, Column2 = "Sample Data" };
                insertedEntry.Add();

                var fetchedEntries = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>();
                Assert.IsTrue(fetchedEntries.Length == 1);

                var fetchedEntry = fetchedEntries.First() as SampleTable1;

                Assert.IsTrue(fetchedEntry != null);
                Assert.IsTrue(fetchedEntry.Column1 == insertedEntry.Column1);
                Assert.IsTrue(fetchedEntry.Column2 == insertedEntry.Column2);

                Assert.IsTrue(fetchedEntry.Remove());

                fetchedEntries = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>();
                Assert.IsTrue(fetchedEntries.Length == 0);
            }
        }

        [Test]
        public void CreateInsertAndDeleteMultiple2_SampleTable1()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            for (int i = 0; i < 20; i++)
            {
                var insertedEntry = new SampleTable1 { Column1 = i * 10, Column2 = "Sample Data" };
                insertedEntry.Add();

                var fetchedEntries = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>();
                Assert.IsTrue(fetchedEntries.Length == i + 1);
            }

            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DeleteAll<SampleTable1>());

            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>().Length == 0);
        }

        [Test]
        public void CreateInsertUpdateAndDeleteMultiple_SampleTable1()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            for (int i = 0; i < 20; i++)
            {
                var insertedEntry = new SampleTable1 { Column1 = i * 10, Column2 = "Sample Data" };
                insertedEntry.Add();

                var fetchedEntries = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>(new[] { new Selector("Column1", insertedEntry.Column1) });
                Assert.IsTrue(fetchedEntries.Length == 1);

                var fetchedEntry = fetchedEntries.First() as SampleTable1;
                Assert.IsNotNull(fetchedEntry);
                var sampleText = fetchedEntry.Column2 = "This is the modified value " + DateTime.Now.Ticks;
                Assert.IsTrue(fetchedEntry.Update());

                fetchedEntries = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>(new[] { new Selector("Column1", insertedEntry.Column1) });
                Assert.IsTrue(fetchedEntries.Length == 1);

                var newlyFetchedEntry = fetchedEntries.First() as SampleTable1;
                Assert.IsNotNull(newlyFetchedEntry);
                Assert.AreEqual(newlyFetchedEntry.Column1, insertedEntry.Column1);
                Assert.AreEqual(newlyFetchedEntry.Column2, sampleText);
            }

            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DeleteAll<SampleTable1>());

            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>().Length == 0);
        }

        [Test]
        public void CreateDuplicateInsert_SampleTable1()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            var insertedEntry = new SampleTable1 { Column1 = 1, Column2 = "Sample Data" };
            insertedEntry.Add();
            try
            {
                var cloneEntry = new SampleTable1 { Column1 = 1, Column2 = "Sample Data" };
                cloneEntry.Add();
                Assert.Fail("No Error was Thrown !");
            }
            catch (DatabaseException ex)
            {
                if (ex.GetErrorType() != DatabaseException.ErrorType.RecordAlreadyExists &&
                    ex.GetErrorType() != DatabaseException.ErrorType.AlreadyExistingUnqiueField)
                {
                    Assert.Fail("The Correct Exception was Thrown, but not the Correct Error Type !");
                }
            }
            catch (System.Exception)
            {
                Assert.Fail("Invalid Exception was Thrown !");
            }

            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DeleteAll<SampleTable1>());

            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>().Length == 0);

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DropTable<SampleTable1>();
            Assert.IsFalse(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());
        }

        [Test]
        public void SelectStringGenerationTest_SampleTable1_2()
        {
            var generatedString1 = DatabaseEntity.GetSelectCommandString<SampleTable1>();
            var generatedString2 = DatabaseEntity.GetSelectCommandString<SampleTable2>();

            Assert.AreEqual(generatedString1, "SELECT SampleTable1_1.Column1 as [Column 1], SampleTable1_1.Column2 as [Column 2] FROM SampleTable1 SampleTable1_1");
            Assert.AreEqual(generatedString2, "SELECT SampleTable2_1.Column1 as [Column 1], SampleTable2_1.Column2 as [Column 2], (CASE WHEN SampleTable2_1.Column3 IN ( SELECT Column1 FROM SampleTable1 ) THEN (SELECT SampleTable1.Column2 FROM SampleTable1 WHERE SampleTable2_1.Column3 = SampleTable1.Column1 LIMIT 1) ELSE \"\" END) as [Column 3] FROM SampleTable2 SampleTable2_1");
        }

        [Test]
        public void CheckEqualObjects()
        {
            var entry1 = new SampleTable1 { Column1 = 1, Column2 = "Sample Data" };
            var entry2 = new SampleTable1 { Column1 = 1, Column2 = "Sample Data" };

            Assert.IsTrue(entry1.Equals(entry2));
        }

        [Test]
        public void ReferenceCheckValidation_SampleTable2()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable2>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable2>());

            var insertedEntry = new SampleTable1 { Column1 = 1, Column2 = "Sample Data" };
            insertedEntry.Add();

            var insertedSampleTable2Entry = new SampleTable2 { Column1 = 10, Column2 = "The Next Set of Data", Column3 = insertedEntry.Column1 };
            insertedSampleTable2Entry.Add();

            Assert.IsTrue(Relationship.CheckReferences(insertedEntry));

            insertedSampleTable2Entry.Remove();

            Assert.IsFalse(Relationship.CheckReferences(insertedEntry));
        }

        [Test]
        public void ReferenceKeyViolationException_SampleTable1_2()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable2>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable2>());

            var insertedEntry = new SampleTable1 { Column1 = 1, Column2 = "Sample Data" };
            insertedEntry.Add();

            var insertedSampleTable2Entry = new SampleTable2 { Column1 = 10, Column2 = "The Next Set of Data", Column3 = insertedEntry.Column1 };
            insertedSampleTable2Entry.Add();

            Assert.IsTrue(Relationship.CheckReferences(insertedEntry));

            try
            {
                insertedEntry.Remove();
                Assert.Fail("No Error was Thrown !");
            }
            catch (DatabaseException ex)
            {
                if (ex.GetErrorType() != DatabaseException.ErrorType.ReferenceKeyViolation)
                {
                    Assert.Fail("The Correct Exception was Thrown, but not the Correct Error Type !");
                }
                else
                {
                    Assert.IsNotNull(ex.GetAdditionalData());
                }
            }
            catch (System.Exception)
            {
                Assert.Fail("Invalid Exception was Thrown !");
            }

            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>(new[] { new Selector("Column1", insertedEntry.Column1) }).Length == 1);
        }

        [Test]
        public void AttemptActionsOnTableWithNoPrimaryKey_SampleTable3()
        {
            try
            {
                GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<InvalidSampleTable3NoPrimaryKey>();
                Assert.Fail("No Error was Thrown !");
            }
            catch (System.Exception ex)
            {
                DatabaseException dbException = null;
                if (ex is DatabaseException)
                {
                    dbException = ex as DatabaseException;
                }
                else if (ex.InnerException is DatabaseException)
                {
                    dbException = ex.InnerException as DatabaseException;
                }
                else
                {
                    Assert.Fail("Invalid Exception was Thrown !");
                }

                if (dbException != null)
                {
                    if (dbException.GetErrorType() != DatabaseException.ErrorType.NoPrimaryKeyColumnsFound)
                    {
                        Assert.Fail("The Correct Exception was Thrown, but not the Correct Error Type !");
                    }
                }
            }
        }

        [Test]
        public void AttemptOnCreatingTableWithNoColumns_SampleTable4()
        {
            try
            {
                GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<InvalidSampleTable4NoColumns>();
                Assert.Fail("No Error was Thrown !");
            }
            catch (System.Exception ex)
            {
                DatabaseException dbException = null;
                if (ex is DatabaseException)
                {
                    dbException = ex as DatabaseException;
                }
                else if (ex.InnerException is DatabaseException)
                {
                    dbException = ex.InnerException as DatabaseException;
                }
                else
                {
                    Assert.Fail("Invalid Exception was Thrown !");
                }

                if (dbException != null)
                {
                    if (dbException.GetErrorType() != DatabaseException.ErrorType.NoColumnsFound)
                    {
                        Assert.Fail("The Correct Exception was Thrown, but not the Correct Error Type !" + dbException);
                    }
                }
            }
        }

        [Test]
        public void LoadingItemToDbEntityForm()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            var insertedEntry = new SampleTable1 { Column1 = 1, Column2 = "Sample Data" };
            var frmSampleTable = DatabaseEntityForm.ShowWindow<FrmSampleTable1>(insertedEntry);
            var retrievedEntry = frmSampleTable.GetUpdatedEntity();
            frmSampleTable.Close();

            Assert.IsTrue(insertedEntry.Equals(retrievedEntry));
        }

        [Test]
        public void LoadingItemsToDatabaseEntityViewer()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            for (int i = 0; i < 20; i++)
            {
                var insertedEntry = new SampleTable1 { Column1 = i * 10, Column2 = "Sample Data" };
                insertedEntry.Add();

                var fetchedEntries = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>(new[] { new Selector("Column1", insertedEntry.Column1) });
                Assert.IsTrue(fetchedEntries.Length == 1);

                var fetchedEntry = fetchedEntries.First() as SampleTable1;
                Assert.IsNotNull(fetchedEntry);
                var sampleText = fetchedEntry.Column2 = "This is the modified value " + DateTime.Now.Ticks;
                Assert.IsTrue(fetchedEntry.Update());

                fetchedEntries = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>(new[] { new Selector("Column1", insertedEntry.Column1) });
                Assert.IsTrue(fetchedEntries.Length == 1);

                var newlyFetchedEntry = fetchedEntries.First() as SampleTable1;
                Assert.IsNotNull(newlyFetchedEntry);
                Assert.AreEqual(newlyFetchedEntry.Column1, insertedEntry.Column1);
                Assert.AreEqual(newlyFetchedEntry.Column2, sampleText);
            }

            var form = DatabaseEntityViewer.ShowNonModalWindow<SampleTable1>(null);
            form.Close();

            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DeleteAll<SampleTable1>());

            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<SampleTable1>().Length == 0);
        }

        [Test]
        public void RegisteringEntityTypeOnUniversalDataModel()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable2>();

            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable2>());

            UniversalDataModel.Register<SampleTable1>();
            UniversalDataModel.Register<SampleTable2>();

            for (int i = 0; i < 20; i++)
            {
                var insertedEntry1 = new SampleTable1 { Column1 = i * 10, Column2 = "Sample Data" };
                insertedEntry1.Add();

                var insertedEntry2 = new SampleTable2 { Column1 = i * 10, Column2 = "Sample Data" };
                insertedEntry2.Add();
            }

            Assert.IsTrue(UniversalDataModel.Select<SampleTable1>().Count == 20);
            Assert.IsTrue(UniversalDataModel.Select<SampleTable2>().Count == 20);
        }

        [Test]
        public void UniversalDataModelDataModelUpdateCheck()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable2>();

            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable2>());

            UniversalDataModel.Register<SampleTable1>();
            UniversalDataModel.Register<SampleTable2>();

            for (int i = 0; i < 20; i++)
            {
                var insertedEntry1 = new SampleTable1 { Column1 = i * 10, Column2 = "Sample Data" };
                insertedEntry1.Add();

                var insertedEntry2 = new SampleTable2 { Column1 = i * 10, Column2 = "Sample Data" };
                insertedEntry2.Add();
            }

            Assert.IsTrue(UniversalDataModel.Select<SampleTable1>().Count == 20);
            Assert.IsTrue(UniversalDataModel.Select<SampleTable2>().Count == 20);

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DeleteMatching<SampleTable1>(new[] { new Selector("Column1", 80, Selector.Operator.LessThan) });

            Assert.IsTrue(UniversalDataModel.Select<SampleTable2>().Count == 20);
            var otherResults = UniversalDataModel.Select<SampleTable1>();
            Assert.IsTrue(otherResults.Count == 12);

            var secondEntry = otherResults[1] as SampleTable1;

            Assert.IsTrue(otherResults.First().Remove());

            Assert.IsTrue(UniversalDataModel.Select<SampleTable1>().Count == 11);
            Assert.IsTrue(UniversalDataModel.Select<SampleTable2>().Count == 20);

            secondEntry.Column2 = "Does this work";
            Assert.IsTrue(secondEntry.Update());

            Assert.IsTrue(UniversalDataModel.Select<SampleTable1>().Count == 11);
            Assert.IsTrue(UniversalDataModel.Select<SampleTable2>().Count == 20);

            var grabbedEntry = UniversalDataModel.Select<SampleTable1>(new []{new Selector("Column1", 90)})[0] as SampleTable1;

            Assert.IsTrue(secondEntry.Equals(grabbedEntry));

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DeleteAll<SampleTable1>();
            Assert.IsTrue(UniversalDataModel.Select<SampleTable1>().Count == 0);

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).DeleteAll<SampleTable2>();
            Assert.IsTrue(UniversalDataModel.Select<SampleTable2>().Count == 0);
        }

        [Test]
        public void HavingTwoDifferentDatabasesForASingleDatabaseType()
        {
            var databaseFile1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\libDBHelperSampleFolder1\\TestDatabase1.sdf";
            var databaseFile2 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\libDBHelperSampleFolder1\\TestDatabase2.sdf";

            try
            {
                if (File.Exists(databaseFile1))
                {
                    File.Delete(databaseFile1);
                }

                if (File.Exists(databaseFile2))
                {
                    File.Delete(databaseFile2);
                }
            }
            catch { /* IGNORED */ }

            GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).SetConnectionString<Database1NormalTable1>("Data Source=" + databaseFile1 + ";Persist Security Info=False;");
            GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).SetConnectionString<Database2NormalTable2>("Data Source=" + databaseFile2 + ";Persist Security Info=False;");

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<Database1NormalTable1>();
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<Database2NormalTable2>();

            var insertedEntry1 = new Database1NormalTable1 { Column1 = 1, Column2 = "Sample Data" };
            var insertedEntry2 = new Database2NormalTable2 { Column1 = 1, Column2 = "Sample Data" };

            insertedEntry1.Add();
            insertedEntry2.Add();

            var fetchedEntries1 = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<Database1NormalTable1>();
            var fetchedEntries2 = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<Database2NormalTable2>();
            Assert.IsTrue(fetchedEntries1.Length == 1);
            Assert.IsTrue(fetchedEntries2.Length == 1);

            var fetchedEntry1 = fetchedEntries1.First() as Database1NormalTable1;
            var fetchedEntry2 = fetchedEntries2.First() as Database2NormalTable2;

            Assert.IsTrue(fetchedEntry1 != null);
            Assert.IsTrue(fetchedEntry1.Column1 == insertedEntry1.Column1);
            Assert.IsTrue(fetchedEntry1.Column2 == insertedEntry1.Column2);

            Assert.IsTrue(fetchedEntry2 != null);
            Assert.IsTrue(fetchedEntry2.Column1 == insertedEntry2.Column1);
            Assert.IsTrue(fetchedEntry2.Column2 == insertedEntry2.Column2);

            Assert.IsTrue(fetchedEntry1.Remove());
            Assert.IsTrue(fetchedEntry2.Remove());

            fetchedEntries1 = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<Database1NormalTable1>();
            Assert.IsTrue(fetchedEntries1.Length == 0);

            fetchedEntries2 = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<Database2NormalTable2>();
            Assert.IsTrue(fetchedEntries2.Length == 0);
        }

        [Test]
        public void TestingDataTableLoading()
        { 
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            for (int i = 0; i < 20; i++)
            {
                var insertedEntry = new SampleTable1 { Column1 = i * 10, Column2 = "Sample Data" };
                insertedEntry.Add();
            }

            DataTable dtblMain = new DataTable();
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).FillDataTable<SampleTable1>(ref dtblMain, new []{new Selector("Column1", 100, Selector.Operator.LessThan)});

            Assert.IsTrue(dtblMain.Rows.Count == 10);
        }

        [Test]
        public void LoadingSavedConnectionData()
        {
            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<SampleTable1>();
            Assert.IsTrue(GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).TableExist<SampleTable1>());

            GenericConnectionManager.RegisterConnectionManager<ConnectionManager>();
            GenericDatabaseManager.RegisterDatabaseManager<DatabaseManager>(true);

            var connectionString = GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).GetConnectionString<SampleTable1>();
            var connectionData = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).Select<GenericConnectionDetails>(new Selector[] { new Selector("TypeName", "libDatabaseHelper.classes.generic.NullType") }).FirstOrDefault() as GenericConnectionDetails;
            var expectedConnectionString = "Data Source=" + Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\libDBHelperSampleFolder1\\SampleDatabase1.sdf;Persist Security Info=False;";

            Assert.IsNotNull(connectionData);
            Assert.IsTrue(connectionString == expectedConnectionString);
            Assert.IsTrue(connectionString == connectionData.ConnectionString);
        }

        [Test]
        public void NonProperImplementationOfConnectionManager()
        {
            var connectionManager = new GenericConnectionManager(DatabaseType.SqlCE);
            var exception1 = Assert.Throws<DatabaseConnectionException>(() => connectionManager.GetConnectionString());
            Assert.IsTrue(exception1.GetErrorType() == DatabaseConnectionException.ConnectionErrorType.NoConnectionStringFound);

            Assert.Throws<NotImplementedException>(() => connectionManager.SetConnectionString(""));
            Assert.Throws<NotImplementedException>(() => connectionManager.CheckConnectionString(""));

            var exception2 = Assert.Throws<DatabaseConnectionException>(() => GenericConnectionManager.GetConnectionManager(DatabaseType.Generic));
            Assert.IsTrue(exception2.GetErrorType() == DatabaseConnectionException.ConnectionErrorType.NoConnectionManagerFound);

            var nonExistantDir = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\sampleDir_" + DateTime.Now.Ticks;
            Assert.Throws<DirectoryNotFoundException>(() => GenericConnectionManager.SetLocalDataDirectory(nonExistantDir));

            try
            {
                Directory.CreateDirectory(nonExistantDir);
            }
            catch { Assert.Fail("Unable to create directory : " + nonExistantDir); }

            Assert.DoesNotThrow(() => GenericConnectionManager.SetLocalDataDirectory(nonExistantDir));

            try
            {
                Directory.CreateDirectory(nonExistantDir);
            }
            catch { Console.WriteLine("Unable to delete directory : " + nonExistantDir); }
        }

        [Test]
        public void NonProperlyImplementedDatabaseEntity()
        { 
            
        }

        [Test]
        public void RemovingAKeyFromACompositePrimaryKeyAndCheckingWhetherTheChangeIsPresentOnTheDatabase()
        {
            var databaseFile1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + string.Format("\\libDBHelperSampleFolder1\\TestDatabase{0}.sdf", DateTime.Now.Ticks);

            try
            {
                if (File.Exists(databaseFile1))
                {
                    File.Delete(databaseFile1);
                }
            }
            catch { /* IGNORED */ }

            GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).SetConnectionString<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>("Data Source=" + databaseFile1 + ";Persist Security Info=False;");
            GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).SetConnectionString<ChangingPrimaryKeyTestNamespace_RemovingPrimaryKey.SimpleNormalTable>("Data Source=" + databaseFile1 + ";Persist Security Info=False;");

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
            //
            // Checking the table structure
            {
                var availableColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetTableFields<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
                var availablePrimaryColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetPrimaryKeyDetails<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();

                Assert.AreEqual(availableColumns.Length, 4);
                Assert.Contains("column1", availableColumns);
                Assert.Contains("column2", availableColumns);
                Assert.Contains("column3", availableColumns);
                Assert.Contains("column4", availableColumns);

                Assert.AreEqual(availablePrimaryColumns.PrimaryKeyFields.Length, 2);
                Assert.Contains("column1", availablePrimaryColumns.PrimaryKeyFields);
                Assert.Contains("column2", availablePrimaryColumns.PrimaryKeyFields);
            }

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<ChangingPrimaryKeyTestNamespace_RemovingPrimaryKey.SimpleNormalTable>();
            //
            // Checking the table structure
            {
                var availableColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetTableFields<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
                var availablePrimaryColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetPrimaryKeyDetails<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();

                Assert.AreEqual(availableColumns.Length, 4);
                Assert.Contains("column1", availableColumns);
                Assert.Contains("column2", availableColumns);
                Assert.Contains("column3", availableColumns);
                Assert.Contains("column4", availableColumns);

                Assert.AreEqual(availablePrimaryColumns.PrimaryKeyFields.Length, 1);
                Assert.Contains("column1", availablePrimaryColumns.PrimaryKeyFields);
            }
        }

        [Test]
        public void AddingAKeyToACompositePrimaryKeyAndCheckingWhetherTheChangeIsPresentOnTheDatabase()
        {
            var databaseFile1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + string.Format("\\libDBHelperSampleFolder1\\TestDatabase{0}.sdf", DateTime.Now.Ticks);

            try
            {
                if (File.Exists(databaseFile1))
                {
                    File.Delete(databaseFile1);
                }
            }
            catch { /* IGNORED */ }

            GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).SetConnectionString<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>("Data Source=" + databaseFile1 + ";Persist Security Info=False;");
            GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).SetConnectionString<ChangingPrimaryKeyTestNamespace_AddingPrimaryKey.SimpleNormalTable>("Data Source=" + databaseFile1 + ";Persist Security Info=False;");


            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
            //
            // Checking the table structure
            {
                var availableColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetTableFields<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
                var availablePrimaryColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetPrimaryKeyDetails<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();

                Assert.AreEqual(availableColumns.Length, 4);
                Assert.Contains("column1", availableColumns);
                Assert.Contains("column2", availableColumns);
                Assert.Contains("column3", availableColumns);
                Assert.Contains("column4", availableColumns);

                Assert.AreEqual(availablePrimaryColumns.PrimaryKeyFields.Length, 2);
                Assert.Contains("column1", availablePrimaryColumns.PrimaryKeyFields);
                Assert.Contains("column2", availablePrimaryColumns.PrimaryKeyFields);
            }

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<ChangingPrimaryKeyTestNamespace_AddingPrimaryKey.SimpleNormalTable>();
            //
            // Checking the table structure
            {
                var availableColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetTableFields<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
                var availablePrimaryColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetPrimaryKeyDetails<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();

                Assert.AreEqual(availableColumns.Length, 4);
                Assert.Contains("column1", availableColumns);
                Assert.Contains("column2", availableColumns);
                Assert.Contains("column3", availableColumns);
                Assert.Contains("column4", availableColumns);

                Assert.AreEqual(availablePrimaryColumns.PrimaryKeyFields.Length, 3);
                Assert.Contains("column1", availablePrimaryColumns.PrimaryKeyFields);
                Assert.Contains("column2", availablePrimaryColumns.PrimaryKeyFields);
                Assert.Contains("column3", availablePrimaryColumns.PrimaryKeyFields);
            }
        }

        [Test]
        public void RemovingAKeyAndTheCorrespondingColumnFromACompositePrimaryKeyAndCheckingWhetherTheChangeIsPresentOnTheDatabase()
        {
            var databaseFile1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + string.Format("\\libDBHelperSampleFolder1\\TestDatabase{0}.sdf", DateTime.Now.Ticks);

            try
            {
                if (File.Exists(databaseFile1))
                {
                    File.Delete(databaseFile1);
                }
            }
            catch { /* IGNORED */ }

            GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).SetConnectionString<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>("Data Source=" + databaseFile1 + ";Persist Security Info=False;");
            GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).SetConnectionString<ChangingPrimaryKeyTestNamespace_RemovingPrimaryKeyColumn.SimpleNormalTable>("Data Source=" + databaseFile1 + ";Persist Security Info=False;");

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
            //
            // Checking the table structure
            {
                var availableColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetTableFields<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
                var availablePrimaryColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetPrimaryKeyDetails<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();

                Assert.AreEqual(availableColumns.Length, 4);
                Assert.Contains("column1", availableColumns);
                Assert.Contains("column2", availableColumns);
                Assert.Contains("column3", availableColumns);
                Assert.Contains("column4", availableColumns);

                Assert.AreEqual(availablePrimaryColumns.PrimaryKeyFields.Length, 2);
                Assert.Contains("column1", availablePrimaryColumns.PrimaryKeyFields);
                Assert.Contains("column2", availablePrimaryColumns.PrimaryKeyFields);
            }

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<ChangingPrimaryKeyTestNamespace_RemovingPrimaryKeyColumn.SimpleNormalTable>();
            //
            // Checking the table structure
            {
                var availableColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetTableFields<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
                var availablePrimaryColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetPrimaryKeyDetails<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();

                Assert.AreEqual(availableColumns.Length, 3);
                Assert.Contains("column1", availableColumns);
                Assert.Contains("column3", availableColumns);
                Assert.Contains("column4", availableColumns);

                Assert.AreEqual(availablePrimaryColumns.PrimaryKeyFields.Length, 1);
                Assert.Contains("column1", availablePrimaryColumns.PrimaryKeyFields);
            }
        }

        [Test]
        public void AddingAKeyAndTheCorrespondingColumnToACompositePrimaryKeyAndCheckingWhetherTheChangeIsPresentOnTheDatabase()
        {
            var databaseFile1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + string.Format("\\libDBHelperSampleFolder1\\TestDatabase{0}.sdf", DateTime.Now.Ticks);

            try
            {
                if (File.Exists(databaseFile1))
                {
                    File.Delete(databaseFile1);
                }
            }
            catch { /* IGNORED */ }

            GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).SetConnectionString<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>("Data Source=" + databaseFile1 + ";Persist Security Info=False;");
            GenericConnectionManager.GetConnectionManager(DatabaseType.SqlCE).SetConnectionString<ChangingPrimaryKeyTestNamespace_AddingPrimaryKeyColumn.SimpleNormalTable>("Data Source=" + databaseFile1 + ";Persist Security Info=False;");


            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
            //
            // Checking the table structure
            {
                var availableColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetTableFields<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
                var availablePrimaryColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetPrimaryKeyDetails<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();

                Assert.AreEqual(availableColumns.Length, 4);
                Assert.Contains("column1", availableColumns);
                Assert.Contains("column2", availableColumns);
                Assert.Contains("column3", availableColumns);
                Assert.Contains("column4", availableColumns);

                Assert.AreEqual(availablePrimaryColumns.PrimaryKeyFields.Length, 2);
                Assert.Contains("column1", availablePrimaryColumns.PrimaryKeyFields);
                Assert.Contains("column2", availablePrimaryColumns.PrimaryKeyFields);
            }

            GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).CreateTable<ChangingPrimaryKeyTestNamespace_AddingPrimaryKeyColumn.SimpleNormalTable>();
            //
            // Checking the table structure
            {
                var availableColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetTableFields<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();
                var availablePrimaryColumns = GenericDatabaseManager.GetDatabaseManager(DatabaseType.SqlCE).GetPrimaryKeyDetails<ChangingPrimaryKeyTestNamespace_Original.SimpleNormalTable>();

                Assert.AreEqual(availableColumns.Length, 5);
                Assert.Contains("column1", availableColumns);
                Assert.Contains("column2", availableColumns);
                Assert.Contains("column3", availableColumns);
                Assert.Contains("column4", availableColumns);
                Assert.Contains("column5", availableColumns);

                Assert.AreEqual(availablePrimaryColumns.PrimaryKeyFields.Length, 3);
                Assert.Contains("column1", availablePrimaryColumns.PrimaryKeyFields);
                Assert.Contains("column2", availablePrimaryColumns.PrimaryKeyFields);
                Assert.Contains("column5", availablePrimaryColumns.PrimaryKeyFields);
            }
        }
    }
}